{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "34fb8df8",
   "metadata": {},
   "source": [
    "### Lists\n",
    "Lists contain comma separated values enclosed in square brackets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b9b90e75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Blue', 'Red', 'Yellow', 'Brown']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create\n",
    "mycolors = [\"Blue\", \"Red\", \"Yellow\", \"Brown\"]\n",
    "\n",
    "#display\n",
    "mycolors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cbfe74d",
   "metadata": {},
   "source": [
    "#### Indexing\n",
    "- Accessing values in a list positionally\n",
    "- Python uses a zero-based indexing format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b21c9555",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Blue'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#retrieve the first item in the list mycolors\n",
    "mycolors[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d0680564",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Brown'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#class activity: retrieve the last item in the list mycolors\n",
    "mycolors[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9f9d572d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create list of 10 random numbers\n",
    "mynum = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n",
    "\n",
    "#display\n",
    "mynum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f316a6df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Index with a range\n",
    "#Retrieve the first five items in the list mynum\n",
    "mynum[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cebe63c9",
   "metadata": {},
   "source": [
    "Note: When indexing with a range, the value in the upper boundary position is excluded"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9a6cae5",
   "metadata": {},
   "source": [
    "#### Class Activity: Create a list of 7 random names and extract the last four items in the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d2c0b044",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Simi', 'Thota', 'Ram', 'Tom']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RandomNames = [\"Avinash\", \"sam\", \"Roy\", \"Simi\", \"Thota\", \"Ram\", \"Tom\"]\n",
    "\n",
    "RandomNames[3:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "41441339",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Oscar', 'Hammed', 'Jay', 'Aisha']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a list of 7 random names\n",
    "mynames = [\"Tima\", \"Nicole\", \"Lena\", \"Oscar\", \"Hammed\", \"Jay\", \"Aisha\"]\n",
    "\n",
    "#display\n",
    "mynames[3:7]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14ba0619",
   "metadata": {},
   "source": [
    "#### List Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1b812a43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create list of 10 random numbers\n",
    "mynum = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n",
    "\n",
    "#display\n",
    "mynum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ea32f55b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Len: Retrieves the number of items in a list\n",
    "len(mynum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d9315729",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Max: Retrieves the largest value in a list\n",
    "max(mynum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "20e88325",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Min: Retrieves the smallest value in a list\n",
    "min(mynum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "593ef54b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Append: Add new item to an already existing list\n",
    "mynum.append(1)\n",
    "\n",
    "#display\n",
    "mynum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b2d1fcee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check minimum value after appending a new number\n",
    "min(mynum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a87fe90a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove: Deletes item from an already existing list\n",
    "mynum.remove(1)\n",
    "\n",
    "#display\n",
    "mynum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4bc94f29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sort a list\n",
    "mynum.sort(reverse = False) #True = descending, False = Ascending\n",
    "\n",
    "mynum"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82716b27",
   "metadata": {},
   "source": [
    "#### Class activity: Create a list of five random numbers, using functions: Get the difference between the largest and smallest value divided by the lenght of the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "89fee015",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num = [10, 20, 30, 40, 50]\n",
    "\n",
    "#Get the max, min and lenght values from the list\n",
    "a = max(num)\n",
    "b = min(num)\n",
    "c = len(num)\n",
    "\n",
    "#Compute\n",
    "(a-b)/c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30ebba42",
   "metadata": {},
   "source": [
    "#### Tuples\n",
    "    They are similar to lists but with two major differences\n",
    "    1. They created with round brackets or parenthesis\n",
    "    2. They are immutable/unchangeable: update/add, remove or sort is not allowed in any way or form"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f6f33e6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Blue', 'Red', 'Yellow', 'Brown')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a tuple of colors\n",
    "mytuple = (\"Blue\", \"Red\", \"Yellow\", \"Brown\")\n",
    "\n",
    "mytuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7a960d75",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-41-83af92e7d3f8>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmytuple\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Orange\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "mytuple.append(\"Orange\") #this is not available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bdbdee71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Blue'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mytuple[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221efbff",
   "metadata": {},
   "source": [
    "#### Dictionaries\n",
    "    They store data in key-value pairs\n",
    "    - Dictionaries are created using the curly-braces {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "46d23f6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'FirstName': 'Simi',\n",
       " 'LastName': 'Adeboye',\n",
       " 'Location': 'Nigeria',\n",
       " 'Zipcode': 23401}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create a dictionary\n",
    "mydict = {\"FirstName\" : \"Simi\", \"LastName\" : \"Adeboye\", \"Location\" : \"Nigeria\", \"Zipcode\" : 23401}\n",
    "\n",
    "#display\n",
    "mydict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "721d1350",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23401"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accessing values in a dictionary\n",
    "mydict[\"Zipcode\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0673895a",
   "metadata": {},
   "outputs": [],
   "source": [
    "mydict[\"Location\"] = \"China\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fbf91a5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'FirstName': 'Simi',\n",
       " 'LastName': 'Adeboye',\n",
       " 'Location': 'China',\n",
       " 'Zipcode': 23401}"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mydict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b4caf55a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'FirstName': 'James',\n",
       " 'LastName': 'Adeboye',\n",
       " 'Location': 'China',\n",
       " 'Zipcode': 23401}"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#update firstname\n",
    "mydict[\"FirstName\"] = \"James\"\n",
    "\n",
    "mydict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1fab3b5",
   "metadata": {},
   "source": [
    "#### Dictionary Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "25c56737",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#len\n",
    "len(mydict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "df7f11ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values(['James', 'Adeboye', 'China', 23401])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display all the values ONLY\n",
    "mydict.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "894c9024",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['FirstName', 'LastName', 'Location', 'Zipcode'])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display all the keys ONLY\n",
    "mydict.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "2e536398",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_items([('FirstName', 'James'), ('LastName', 'Adeboye'), ('Location', 'China'), ('Zipcode', 23401)])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#retrieve the key-value pairs\n",
    "mydict.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "864321c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'James'"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accessing values in a dictionary\n",
    "mydict[\"FirstName\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "60f76d4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'James'"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the corresponding value to a key\n",
    "mydict.get(\"FirstName\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "507a41fd",
   "metadata": {},
   "source": [
    "Create a python program that prompts users for a month input, and then your program returns the number of days in that month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "f3a7c66e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a month: January\n",
      "January\n",
      "January has 31 days\n"
     ]
    }
   ],
   "source": [
    "#STEP 1: Create a dictionary of month and their corresponding days\n",
    "mymonth = {\"January\": 31,\n",
    "          \"February\" : \"28 or 29 in leap years\",\n",
    "          \"March\" : 31,\n",
    "          \"April\" : 30,\n",
    "          \"May\" : 31,\n",
    "          \"June\" : 30,\n",
    "          \"July\" : 31,\n",
    "          \"August\" : 31,\n",
    "          \"September\" : 30,\n",
    "          \"October\" : 31,\n",
    "          \"November\" : 30,\n",
    "          'December' : 31}\n",
    "\n",
    "#STEP 2: Get the user input\n",
    "userinput = input(\"Enter a month: \")\n",
    "print(userinput)\n",
    "#STEP 3: Return the number of days with a fancy message - (January) has (XXX) of days\n",
    "print(userinput, \"has\", mymonth['January'], \"days\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "63f31cd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a month: December\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "94ef00e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "January has 31 days\n"
     ]
    }
   ],
   "source": [
    "#STEP 3: Return the number of days with a fancy message - (January) has (XXX) of days\n",
    "print('January', \"has\", mymonth['January'], \"days\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "133d6813",
   "metadata": {},
   "source": [
    "### For Loop\n",
    "Iterates over elements/items in a data structure and executing a piece of code on each item one at a time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "685a632c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create list of 10 random numbers\n",
    "mynum = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n",
    "\n",
    "#display\n",
    "mynum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "37fc2363",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the square root of all the values in this list\n",
    "mynum[0] ** 0.5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "22a83442",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.486832980505138"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mynum[1] ** 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5a69bed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i is currently 100\n",
      "10.0\n",
      "i is currently 90\n",
      "9.486832980505138\n",
      "i is currently 80\n",
      "8.94427190999916\n",
      "i is currently 70\n",
      "8.366600265340756\n",
      "i is currently 60\n",
      "7.745966692414834\n",
      "i is currently 50\n",
      "7.0710678118654755\n",
      "i is currently 40\n",
      "6.324555320336759\n",
      "i is currently 30\n",
      "5.477225575051661\n",
      "i is currently 20\n",
      "4.47213595499958\n",
      "i is currently 10\n",
      "3.1622776601683795\n"
     ]
    }
   ],
   "source": [
    "for i in mynum: #mynum is the data structure to iterate over\n",
    "    print(\"i is currently\", i)\n",
    "    print(i ** 0.5) #Body of the loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3ea6201e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "going\n",
      "acting\n",
      "climbing\n",
      "rolling\n"
     ]
    }
   ],
   "source": [
    "actions = [\"go\", \"act\", \"climb\", \"roll\"]\n",
    "\n",
    "#This is a manual way to do that\n",
    "print(actions[0] + \"ing\")\n",
    "print(actions[1] + \"ing\")\n",
    "print(actions[2] + \"ing\")\n",
    "print(actions[3] + \"ing\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24090ddf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "going\n",
      "acting\n",
      "climbing\n",
      "rolling\n",
      "singing\n",
      "jumping\n"
     ]
    }
   ],
   "source": [
    "actions = [\"go\", \"act\", \"climb\", \"roll\", \"sing\", \"jump\"]\n",
    "\n",
    "for i in actions: #actions is the data structure we want to iterate on\n",
    "    #print(\"I'm about to work on\", i)\n",
    "    print(i + \"ing\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6323616a",
   "metadata": {},
   "source": [
    "#### Class Activity: Create a list of five random numbers and then subtract the lenght of the list from each item in the list created"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "50edaabb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95\n",
      "51\n",
      "65\n",
      "14\n",
      "15\n"
     ]
    }
   ],
   "source": [
    "#STEP 1: Create a list\n",
    "mynum = [100, 56, 70, 19, 20]\n",
    "\n",
    "#STEP 2: Get the length of the list\n",
    "num_len = len(mynum)\n",
    "\n",
    "#STEP3: Iterate with a Forloop\n",
    "for num in mynum: #mynum is the data structure to iterate on\n",
    "    print(num - num_len) #The body of the loop"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35639bee",
   "metadata": {},
   "source": [
    "### Functions\n",
    "- User-defined Functions: Functions we build ourselves\n",
    "- In-built functions: Predefined functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cdcc838d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a function that always displays hello world\n",
    "def greeter():\n",
    "    print(\"Hello World\") #body of the function\n",
    "    return #The return keyword marks the end of a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7febb6ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "greeter() #Call/invoke the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d57127d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#One Step forward: We use input parameters now\n",
    "def greeter2(name):\n",
    "    print(\"Hello\", name)\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e1c129e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Juliet\n"
     ]
    }
   ],
   "source": [
    "#Call the function\n",
    "greeter2(name = \"Juliet\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aaffb427",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a function that returns the sum of any two numbers\n",
    "def summer(x, y):\n",
    "    result = x + y\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cf51bdc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summer(x = 100, y = 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c752c1e3",
   "metadata": {},
   "source": [
    "#### Class Activity: Define a function, that returns the square root of a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b30beae8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sqrt(x):\n",
    "    result = x ** 0.5\n",
    "    return result\n",
    "\n",
    "sqrt(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cf46267a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sqrt(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5948de89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.0\n",
      "7.483314773547883\n",
      "8.366600265340756\n",
      "4.358898943540674\n",
      "4.47213595499958\n"
     ]
    }
   ],
   "source": [
    "for i in mynum: #mynum is the data structure to iterate over\n",
    "    print(sqrt(i)) #Body of the loop"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d819f2a",
   "metadata": {},
   "source": [
    "#### A Few More Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "54836e33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['This', 'is', 'my', 'first', 'attempt', 'with', 'python']"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Split(): Cuts a string into a list based on a delimiter\n",
    "sentence = \"This is my first attempt with python\"\n",
    "\n",
    "#Split sentence\n",
    "sentence.split(\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bae65da3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Simi', 'Adeboye', 'NG', 'Pairview']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bio = \"Simi,Adeboye,NG,Pairview\"\n",
    "\n",
    "bio.split(\",\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae5f6dd4",
   "metadata": {},
   "source": [
    "#### Class Activity: Split the url provided using (/) as the delimiter. https://en.wikipedia.org/wiki/UEFA_European_Championship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6390801b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https:', '', 'en.wikipedia.org', 'wiki', 'UEFA_European_Championship']"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = \"https://en.wikipedia.org/wiki/UEFA_European_Championship\"\n",
    "\n",
    "url.split(\"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5585ef47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://en.wikipedia.org/wiki/UEFA_European_Championship'"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url_split = url.split(\"/\")\n",
    "\n",
    "#Join the strings back using the join function\n",
    "\"/\".join(url_split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "975cd08c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'I love writing Java'"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replace\n",
    "statement =\"I love writing Python\"\n",
    "\n",
    "#replace the Python with Java\n",
    "statement.replace(\"Python\", \"Java\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd8595d",
   "metadata": {},
   "source": [
    "#### Class Activity: You have been provided with a single string of multiple words. Find a way to append \"ing\" to each word in the string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a7272ad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'go act climb roll sing jump'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actions_new = 'go act climb roll sing jump'\n",
    "\n",
    "actions_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7dd955d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['go', 'act', 'climb', 'roll', 'sing', 'jump']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Split into individual words using space as delimiter\n",
    "step1 = actions_new.split(\" \")\n",
    "\n",
    "step1\n",
    "\n",
    "for word in step1:\n",
    "    print(word + \"ing\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7e8fef76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'semaJ'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reversing a string\n",
    "word = \"James\"\n",
    "\n",
    "word[::-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f4bdf5e",
   "metadata": {},
   "source": [
    "#### Write a function that checks if a word is a palindrome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bea1f680",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Palindrome\n"
     ]
    }
   ],
   "source": [
    "word = \"nun\" \n",
    "\n",
    "#obtain the reversed version of the word\n",
    "reverse_word = word[::-1]\n",
    "\n",
    "if word == reverse_word:\n",
    "    print(\"Palindrome\")\n",
    "else:\n",
    "    print(\"Not Palindrome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb9ca10d",
   "metadata": {},
   "source": [
    "#### Combine the Palindrome process into a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6a050dcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def palindrome(word):\n",
    "    reverse_word = word[::-1]\n",
    "    \n",
    "    if word == reverse_word:\n",
    "        print(\"Palindrome\")\n",
    "    else:\n",
    "        print(\"Not Palindrome\")\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "04faeea0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Palindrome\n"
     ]
    }
   ],
   "source": [
    "palindrome(\"mom\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e061423a",
   "metadata": {},
   "source": [
    "#### Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "cd489b99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ResellerOrOnline</th>\n",
       "      <th>Name</th>\n",
       "      <th>Month</th>\n",
       "      <th>Year</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>5</td>\n",
       "      <td>2013</td>\n",
       "      <td>49824.713775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>6</td>\n",
       "      <td>2013</td>\n",
       "      <td>134280.982239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>266778.707809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>8</td>\n",
       "      <td>2013</td>\n",
       "      <td>55341.462000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>124225.104000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>547</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2</td>\n",
       "      <td>2014</td>\n",
       "      <td>175784.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>548</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>3</td>\n",
       "      <td>2014</td>\n",
       "      <td>188023.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>4</td>\n",
       "      <td>2014</td>\n",
       "      <td>206451.510000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>5</td>\n",
       "      <td>2014</td>\n",
       "      <td>262427.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>551</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>6</td>\n",
       "      <td>2014</td>\n",
       "      <td>4169.950000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>552 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ResellerOrOnline            Name  Month  Year        Revenue\n",
       "0                   0       Australia      5  2013   49824.713775\n",
       "1                   0       Australia      6  2013  134280.982239\n",
       "2                   0       Australia      7  2013  266778.707809\n",
       "3                   0       Australia      8  2013   55341.462000\n",
       "4                   0       Australia      9  2013  124225.104000\n",
       "..                ...             ...    ...   ...            ...\n",
       "547                 1  United Kingdom      2  2014  175784.400000\n",
       "548                 1  United Kingdom      3  2014  188023.700000\n",
       "549                 1  United Kingdom      4  2014  206451.510000\n",
       "550                 1  United Kingdom      5  2014  262427.320000\n",
       "551                 1  United Kingdom      6  2014    4169.950000\n",
       "\n",
       "[552 rows x 5 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#How to import pandas\n",
    "import pandas as pd\n",
    "\n",
    "#read in the data\n",
    "df = pd.read_excel(\"SalesForecast_RawData.xlsx\")\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "3403a52c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ResellerOrOnline</th>\n",
       "      <th>Name</th>\n",
       "      <th>Month</th>\n",
       "      <th>Year</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>5</td>\n",
       "      <td>2013</td>\n",
       "      <td>49824.713775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>6</td>\n",
       "      <td>2013</td>\n",
       "      <td>134280.982239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>266778.707809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>8</td>\n",
       "      <td>2013</td>\n",
       "      <td>55341.462000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Australia</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>124225.104000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ResellerOrOnline       Name  Month  Year        Revenue\n",
       "0                 0  Australia      5  2013   49824.713775\n",
       "1                 0  Australia      6  2013  134280.982239\n",
       "2                 0  Australia      7  2013  266778.707809\n",
       "3                 0  Australia      8  2013   55341.462000\n",
       "4                 0  Australia      9  2013  124225.104000"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#head\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d60c8fb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ResellerOrOnline</th>\n",
       "      <th>Name</th>\n",
       "      <th>Month</th>\n",
       "      <th>Year</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>547</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2</td>\n",
       "      <td>2014</td>\n",
       "      <td>175784.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>548</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>3</td>\n",
       "      <td>2014</td>\n",
       "      <td>188023.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>4</td>\n",
       "      <td>2014</td>\n",
       "      <td>206451.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>5</td>\n",
       "      <td>2014</td>\n",
       "      <td>262427.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>551</th>\n",
       "      <td>1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>6</td>\n",
       "      <td>2014</td>\n",
       "      <td>4169.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ResellerOrOnline            Name  Month  Year    Revenue\n",
       "547                 1  United Kingdom      2  2014  175784.40\n",
       "548                 1  United Kingdom      3  2014  188023.70\n",
       "549                 1  United Kingdom      4  2014  206451.51\n",
       "550                 1  United Kingdom      5  2014  262427.32\n",
       "551                 1  United Kingdom      6  2014    4169.95"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#tail\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a19034f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(552, 5)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#shape: Number of rows and columns\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b33d67e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ResellerOrOnline</th>\n",
       "      <th>Month</th>\n",
       "      <th>Year</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>552.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>5.520000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.525362</td>\n",
       "      <td>6.485507</td>\n",
       "      <td>2012.534420</td>\n",
       "      <td>1.989528e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.499809</td>\n",
       "      <td>3.400086</td>\n",
       "      <td>0.928815</td>\n",
       "      <td>1.935884e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>7.280000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>5.535895e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2013.000000</td>\n",
       "      <td>1.461063e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2013.000000</td>\n",
       "      <td>2.668921e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>1.142686e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ResellerOrOnline       Month         Year       Revenue\n",
       "count        552.000000  552.000000   552.000000  5.520000e+02\n",
       "mean           0.525362    6.485507  2012.534420  1.989528e+05\n",
       "std            0.499809    3.400086     0.928815  1.935884e+05\n",
       "min            0.000000    1.000000  2011.000000  7.280000e+00\n",
       "25%            0.000000    4.000000  2012.000000  5.535895e+04\n",
       "50%            1.000000    6.000000  2013.000000  1.461063e+05\n",
       "75%            1.000000    9.000000  2013.000000  2.668921e+05\n",
       "max            1.000000   12.000000  2014.000000  1.142686e+06"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#describe: Summary statistics\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "04c104e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0           Australia\n",
       "1           Australia\n",
       "2           Australia\n",
       "3           Australia\n",
       "4           Australia\n",
       "            ...      \n",
       "547    United Kingdom\n",
       "548    United Kingdom\n",
       "549    United Kingdom\n",
       "550    United Kingdom\n",
       "551    United Kingdom\n",
       "Name: Name, Length: 552, dtype: object"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Index columns\n",
    "df.Name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "54e9eff6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      2013\n",
       "1      2013\n",
       "2      2013\n",
       "3      2013\n",
       "4      2013\n",
       "       ... \n",
       "547    2014\n",
       "548    2014\n",
       "549    2014\n",
       "550    2014\n",
       "551    2014\n",
       "Name: Year, Length: 552, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3b96d551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2013, 2014, 2011, 2012], dtype=int64)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Distinct count\n",
    "#Retrieve all the distinct years\n",
    "df.Year.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9328dd75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#distinct count\n",
    "df.Year.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e8083b88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ResellerOrOnline', 'Name', 'Month', 'Year', 'Revenue'], dtype='object')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#preview the column names\n",
    "df.columns"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

