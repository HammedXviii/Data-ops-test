{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "402f8bf7",
   "metadata": {},
   "source": [
    "### Modules Contd\n",
    "#### Webscraping: BeautifulSoup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53fdcf99",
   "metadata": {},
   "source": [
    "<h1>This is H1 </h1>\n",
    "<h2>This is H2 </h2>\n",
    "<h3>This is H3 </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a28517e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup #import the module that allows us to scrape the web\n",
    "import urllib.request as ur #Allows us to send http requests\n",
    "\n",
    "#Save the url in a variable\n",
    "url = \"https://www.bbc.com/news\"\n",
    "\n",
    "##STEP1: Connect to the webpage\n",
    "Query = ur.urlopen(url)\n",
    "\n",
    "#STEP2: Scrape the soup from the webpage\n",
    "mysoup = BeautifulSoup(Query)\n",
    "\n",
    "#preview soup\n",
    "mysoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4aba049",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find everything wrapped in h3 tags\n",
    "my_h3_tags = mysoup.find_all(\"h3\") #returns a list of everything wrapped in the specified tags (findAll, find_all)\n",
    "#preview\n",
    "my_h3_tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f54603c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#text.strip: A bs function for stripping out tags automatically\n",
    "print(my_h3_tags[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d7e7af7",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_h3_tags[0].text.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaa57c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Try to strip out the tags for all items in my_h3_tags\n",
    "for tags in my_h3_tags:\n",
    "    print(tags.text.strip())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f76d33a",
   "metadata": {},
   "source": [
    "#### Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e4d679",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np #how to import numpy\n",
    "\n",
    "#create a numpy object\n",
    "numpy_obj = np.array([1,2,3])\n",
    "\n",
    "numpy_obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ac31abc",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(numpy_obj) #nd - n-dimension/multidimensional"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2e08dbb",
   "metadata": {},
   "source": [
    "#### Matplotlib: Data Visualization\n",
    "Others: Seaborn, Plotly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "804eea0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt #how to import matplotlib\n",
    "#barchart\n",
    "names = [\"James\", \"John\", \"Juliet\"]\n",
    "\n",
    "age = [15, 20, 30]\n",
    "\n",
    "#plot a bar chart\n",
    "plt.figure(figsize = (10, 5)) #width, height specify the size of the canvas\n",
    "plt.bar(names, age)\n",
    "plt.title(\"Names vs Age\", fontsize = 15)\n",
    "plt.xlabel(\"Name\", fontsize = 10)\n",
    "plt.ylabel(\"Age\", fontsize = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bd6e7aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#make a pie chart\n",
    "plt.figure(figsize = (10, 5))\n",
    "plt.pie(age, labels = names, shadow = True)\n",
    "plt.legend()\n",
    "plt.title(\"Names vs Age\", fontsize = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b266cac0",
   "metadata": {},
   "source": [
    "- https://www.geeksforgeeks.org/python-programming-language/\n",
    "- https://www.datasciencemadesimple.com/python-tutorial-for-data-science/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d47cea5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Back to pandas\n",
    "import pandas as pd\n",
    "\n",
    "url = \"https://www.ussoccer.com/uswnt-stats\"\n",
    "\n",
    "tables = pd.read_html(url)\n",
    "\n",
    "len(tables)\n",
    "\n",
    "tables[0].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6647436a",
   "metadata": {},
   "source": [
    "#### While Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cbeda61",
   "metadata": {},
   "outputs": [],
   "source": [
    "while 1 < 2:\n",
    "    print(\"One is less than two\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a78207c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 10\n",
    "\n",
    "while a <= 20:\n",
    "    print(\"The value of a is\", a)\n",
    "    a = a + 1 #add one to the value of a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "460579db",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a while loop to display all the values from 1 - 20\n",
    "a = 1\n",
    "\n",
    "while a <= 20:\n",
    "    print(a)\n",
    "    a = a + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c73115cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 squared is: 400\n",
      "21 squared is: 441\n",
      "22 squared is: 484\n",
      "23 squared is: 529\n",
      "24 squared is: 576\n",
      "25 squared is: 625\n",
      "26 squared is: 676\n",
      "27 squared is: 729\n",
      "28 squared is: 784\n",
      "29 squared is: 841\n",
      "30 squared is: 900\n"
     ]
    }
   ],
   "source": [
    "#Class Activity: Write a while loop to print the square of all the values from 20 - 30\n",
    "a = 20\n",
    "\n",
    "while a <= 30:\n",
    "    print(a, \"squared is:\", a ** 2)\n",
    "    a+=1 #a = a + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "967071eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "400\n",
      "441\n",
      "484\n",
      "529\n",
      "576\n",
      "625\n",
      "676\n",
      "729\n",
      "784\n",
      "841\n",
      "900\n"
     ]
    }
   ],
   "source": [
    "a = 20\n",
    "\n",
    "while a <= 30:\n",
    "    print(a ** 2)\n",
    "    a = a + 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

